#!/usr/bin/env python3
"""
üéµ SON1KVERS3 - Test Completo Ollama-Suno Proxy
Demostraci√≥n del sistema completo de generaci√≥n musical
"""

import requests
import json
import time
import asyncio

async def test_ollama_suno_complete():
    """Test completo del sistema Ollama-Suno"""
    
    print("üéµ SON1KVERS3 - TEST COMPLETO OLLAMA-SUNO PROXY")
    print("=" * 60)
    
    base_url = "http://localhost:8000"
    
    # 1. Verificar salud de la API
    print("\nüîç 1. Verificando salud de la API...")
    try:
        response = requests.get(f"{base_url}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API saludable")
        else:
            print("‚ùå API no disponible")
            return
    except Exception as e:
        print(f"‚ùå Error conectando con API: {e}")
        return
    
    # 2. Verificar estado del proxy Ollama-Suno
    print("\nüîç 2. Verificando estado del proxy Ollama-Suno...")
    try:
        response = requests.get(f"{base_url}/api/ollama-suno/status", timeout=5)
        if response.status_code == 200:
            status = response.json()
            print(f"‚úÖ Ollama conectado: {status.get('ollama_connected', False)}")
            print(f"‚úÖ Suno configurado: {status.get('suno_configured', False)}")
            print(f"‚úÖ Estado: {status.get('status', 'unknown')}")
        else:
            print("‚ùå Error verificando estado del proxy")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # 3. Probar generaci√≥n musical
    print("\nüéµ 3. Probando generaci√≥n musical...")
    
    test_cases = [
        {
            "prompt": "cyberpunk neon city",
            "lyrics": "Neon lights shine bright, in the digital night, we are the future",
            "style": "electronic",
            "mood": "energetic"
        },
        {
            "prompt": "epic fantasy battle",
            "lyrics": "Swords clash and magic flows, heroes rise against the darkness",
            "style": "orchestral",
            "mood": "epic"
        },
        {
            "prompt": "chill lofi beats",
            "lyrics": "Relaxing vibes and smooth sounds, perfect for studying",
            "style": "lofi",
            "mood": "chill"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüéº Test {i}: {test_case['prompt']}")
        
        try:
            # Enviar request de generaci√≥n
            response = requests.post(
                f"{base_url}/api/music/generate",
                json=test_case,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                job_id = result.get("job_id")
                print(f"‚úÖ Generaci√≥n iniciada: {job_id}")
                
                # Monitorear progreso
                for attempt in range(5):
                    await asyncio.sleep(2)
                    
                    status_response = requests.get(
                        f"{base_url}/api/music/status/{job_id}",
                        timeout=5
                    )
                    
                    if status_response.status_code == 200:
                        status = status_response.json()
                        progress = status.get("progress", 0)
                        print(f"   Progreso: {progress}% - {status.get('message', '')}")
                        
                        if status.get("status") == "completed":
                            track = status.get("result", {})
                            print(f"‚úÖ ¬°Completado! T√≠tulo: {track.get('title', 'Sin t√≠tulo')}")
                            print(f"   Generado por: {track.get('generated_by', 'unknown')}")
                            print(f"   Archivo: {track.get('filename', 'unknown')}")
                            print(f"   URL: {track.get('audio_url', 'unknown')}")
                            break
                    else:
                        print(f"   ‚ö†Ô∏è Error verificando estado: {status_response.status_code}")
            else:
                print(f"‚ùå Error en generaci√≥n: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error en test {i}: {e}")
    
    # 4. Verificar archivos generados
    print("\nüìÅ 4. Verificando archivos generados...")
    try:
        response = requests.get(f"{base_url}/api/music/tracks", timeout=5)
        if response.status_code == 200:
            tracks = response.json()
            print(f"‚úÖ Total de tracks: {len(tracks)}")
            
            for track in tracks[-3:]:  # Mostrar los √∫ltimos 3
                print(f"   - {track.get('title', 'Sin t√≠tulo')} ({track.get('filename', 'unknown')})")
        else:
            print("‚ùå Error obteniendo tracks")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ TEST COMPLETO FINALIZADO")
    print("‚úÖ Sistema Ollama-Suno funcionando correctamente")
    print("‚úÖ Generaci√≥n musical operativa")
    print("‚úÖ Fallbacks inteligentes activos")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_ollama_suno_complete())
