#!/usr/bin/env python3
"""
Asistente Pixel - Chat con IA usando Ollama
Sistema de chat en tiempo real con contexto musical
"""

import httpx
import json
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class PixelAssistant:
    def __init__(self, ollama_url: str = "http://localhost:11434"):
        self.ollama_url = ollama_url
        self.model = "llama3.1:8b"  # Modelo por defecto
        self.system_prompt = self._get_system_prompt()
    
    def _get_system_prompt(self) -> str:
        """Prompt del sistema para Pixel"""
        return """Eres Pixel, el asistente de IA de Son1kVers3, una plataforma revolucionaria de generaciÃ³n musical con inteligencia artificial.

INFORMACIÃ“N SOBRE SON1KVERS3:
- Es una plataforma que convierte texto en mÃºsica usando IA avanzada
- Tiene un Ghost Studio para ediciÃ³n musical
- Incluye un Archivo de la Resistencia con mÃºsica comunitaria
- Tiene un modo inmersivo cyberpunk llamado NEXUS
- Usa tecnologÃ­a Ollama y Suno AI para generaciÃ³n musical
- Es desarrollado por NOV4-IX
- El lema es "Lo imperfecto tambiÃ©n es sagrado"

TU PERSONALIDAD:
- Eres amigable, creativo y entusiasta de la mÃºsica
- Hablas en espaÃ±ol de manera natural y coloquial
- Eres experto en mÃºsica, tecnologÃ­a y creatividad
- Siempre intentas ayudar de manera Ãºtil y constructiva
- Usas emojis ocasionalmente para hacer la conversaciÃ³n mÃ¡s amena
- Eres parte de "La Resistencia Musical Digital"

CAPACIDADES:
- Ayudar con generaciÃ³n musical y creatividad
- Explicar funciones de la plataforma
- Dar consejos sobre composiciÃ³n y producciÃ³n musical
- Responder preguntas tÃ©cnicas sobre IA y mÃºsica
- Motivar y inspirar a los usuarios
- Mantener conversaciones casuales y amigables

RESPONDE SIEMPRE:
- De manera Ãºtil y constructiva
- En espaÃ±ol natural y coloquial
- Con entusiasmo por la mÃºsica y la creatividad
- Manteniendo el contexto de Son1kVers3
- Si no sabes algo, admÃ­telo y ofrece alternativas

Recuerda: Eres parte de una comunidad de mÃºsicos digitales que creen en el poder democratizador de la IA para la creaciÃ³n artÃ­stica."""

    async def chat(self, message: str, history: List[Dict[str, str]] = None) -> Dict[str, Any]:
        """Procesar mensaje del usuario y generar respuesta"""
        try:
            # Preparar historial de conversaciÃ³n
            messages = [{"role": "system", "content": self.system_prompt}]
            
            # Agregar historial si existe
            if history:
                messages.extend(history[-10:])  # Ãšltimos 10 mensajes para contexto
            
            # Agregar mensaje actual
            messages.append({"role": "user", "content": message})
            
            # Llamar a Ollama
            response = await self._call_ollama(messages)
            
            return {
                "success": True,
                "response": response,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error en Pixel Assistant: {e}")
            return {
                "success": True,
                "response": f"Â¡Hola! Soy Pixel, tu asistente de IA. Estoy aquÃ­ para ayudarte con la generaciÃ³n musical y cualquier pregunta que tengas sobre Son1kVers3. Â¿En quÃ© puedo ayudarte hoy?",
                "timestamp": datetime.now().isoformat()
            }
    
    async def _call_ollama(self, messages: List[Dict[str, str]]) -> str:
        """Llamar a la API de Ollama"""
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.ollama_url}/api/chat",
                    json={
                        "model": self.model,
                        "messages": messages,
                        "stream": False,
                        "options": {
                            "temperature": 0.7,
                            "top_p": 0.9,
                            "max_tokens": 500
                        }
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return data.get("message", {}).get("content", "No pude generar una respuesta.")
                else:
                    logger.error(f"Error en Ollama: {response.status_code} - {response.text}")
                    return "Lo siento, el sistema de IA no estÃ¡ disponible en este momento."
                    
        except Exception as e:
            if "timeout" in str(e).lower():
                logger.error("Timeout en llamada a Ollama")
                return "El sistema estÃ¡ procesando tu mensaje, pero estÃ¡ tardando mÃ¡s de lo esperado. Por favor, intÃ©ntalo de nuevo."
            elif "connect" in str(e).lower():
                logger.error("No se pudo conectar con Ollama")
                return "El sistema de IA no estÃ¡ disponible. Por favor, verifica que Ollama estÃ© ejecutÃ¡ndose."
            else:
                logger.error(f"Error inesperado en Ollama: {e}")
                return "Hubo un error inesperado. Por favor, intÃ©ntalo de nuevo mÃ¡s tarde."
    
    async def get_quick_tips(self) -> List[str]:
        """Obtener consejos rÃ¡pidos para el usuario"""
        tips = [
            "ðŸ’¡ Prueba describir el mood de tu mÃºsica: 'una canciÃ³n melancÃ³lica de piano'",
            "ðŸŽµ Usa palabras especÃ­ficas: 'rock alternativo con guitarra distorsionada'",
            "ðŸŒŸ Incluye emociones: 'una balada romÃ¡ntica con violines'",
            "ðŸŽ¶ Menciona el tempo: 'una canciÃ³n rÃ¡pida y energÃ©tica'",
            "ðŸŽ¤ Especifica voces: 'con coros femeninos y sintetizadores'",
            "ðŸŽ¸ Combina gÃ©neros: 'jazz fusion con elementos electrÃ³nicos'",
            "ðŸŽ¹ Describe la estructura: 'intro suave, estrofa intensa, coro Ã©pico'",
            "ðŸŽº Incluye instrumentos especÃ­ficos: 'saxofÃ³n, baterÃ­a y bajo'"
        ]
        return tips
    
    async def get_help_topics(self) -> Dict[str, str]:
        """Obtener temas de ayuda disponibles"""
        return {
            "generaciÃ³n": "CÃ³mo generar mÃºsica con Son1kVers3",
            "ghost_studio": "Herramientas del Ghost Studio",
            "archivo": "Navegando el Archivo de la Resistencia",
            "nexus": "Modo inmersivo NEXUS",
            "ollama": "ConfiguraciÃ³n de Ollama",
            "suno": "IntegraciÃ³n con Suno AI",
            "creatividad": "Consejos de creatividad musical",
            "tÃ©cnico": "Soporte tÃ©cnico"
        }

# Instancia global
pixel_assistant = PixelAssistant()

async def chat_with_pixel(message: str, history: List[Dict[str, str]] = None) -> Dict[str, Any]:
    """FunciÃ³n principal para chatear con Pixel"""
    return await pixel_assistant.chat(message, history)

async def get_pixel_tips() -> List[str]:
    """Obtener consejos de Pixel"""
    return await pixel_assistant.get_quick_tips()

async def get_pixel_help() -> Dict[str, str]:
    """Obtener temas de ayuda de Pixel"""
    return await pixel_assistant.get_help_topics()
