#!/usr/bin/env python3
"""
üåê EXTENSION WEBSOCKET - Comunicaci√≥n en Tiempo Real con Extensi√≥n
Sistema de comunicaci√≥n bidireccional entre el servidor y la extensi√≥n de Chrome
"""

import asyncio
import json
import logging
from typing import Dict, Set, Any
from fastapi import WebSocket, WebSocketDisconnect
from fastapi.routing import APIRouter
import uuid
from datetime import datetime

logger = logging.getLogger(__name__)

class ExtensionConnectionManager:
    """Gestor de conexiones WebSocket con extensiones"""
    
    def __init__(self):
        self.active_connections: Set[WebSocket] = set()
        self.extension_connections: Dict[str, WebSocket] = {}
        self.user_connections: Dict[str, Set[WebSocket]] = {}
        
    async def connect(self, websocket: WebSocket, connection_type: str = "extension"):
        """Conectar nueva WebSocket"""
        await websocket.accept()
        self.active_connections.add(websocket)
        
        if connection_type == "extension":
            connection_id = str(uuid.uuid4())
            self.extension_connections[connection_id] = websocket
            logger.info(f"üîå Extensi√≥n conectada: {connection_id}")
            return connection_id
        else:
            logger.info(f"üîå Cliente conectado")
            return None
    
    def disconnect(self, websocket: WebSocket):
        """Desconectar WebSocket"""
        self.active_connections.discard(websocket)
        
        # Remover de conexiones de extensi√≥n
        for conn_id, conn in list(self.extension_connections.items()):
            if conn == websocket:
                del self.extension_connections[conn_id]
                logger.info(f"üîå Extensi√≥n desconectada: {conn_id}")
                break
    
    async def send_to_extension(self, message: Dict[str, Any]):
        """Enviar mensaje a todas las extensiones conectadas"""
        if not self.extension_connections:
            logger.warning("‚ö†Ô∏è No hay extensiones conectadas")
            return False
        
        message_str = json.dumps(message)
        disconnected = []
        
        for conn_id, websocket in self.extension_connections.items():
            try:
                await websocket.send_text(message_str)
                logger.info(f"üì§ Mensaje enviado a extensi√≥n {conn_id}")
            except Exception as e:
                logger.error(f"‚ùå Error enviando a extensi√≥n {conn_id}: {e}")
                disconnected.append(conn_id)
        
        # Limpiar conexiones desconectadas
        for conn_id in disconnected:
            del self.extension_connections[conn_id]
        
        return len(disconnected) == 0
    
    async def send_to_all(self, message: Dict[str, Any]):
        """Enviar mensaje a todas las conexiones"""
        message_str = json.dumps(message)
        disconnected = []
        
        for websocket in self.active_connections.copy():
            try:
                await websocket.send_text(message_str)
            except Exception as e:
                logger.error(f"‚ùå Error enviando mensaje: {e}")
                disconnected.append(websocket)
        
        # Limpiar conexiones desconectadas
        for websocket in disconnected:
            self.disconnect(websocket)
    
    async def handle_extension_message(self, websocket: WebSocket, message: Dict[str, Any]):
        """Manejar mensaje de extensi√≥n"""
        try:
            message_type = message.get("type")
            
            if message_type == "ping":
                await websocket.send_text(json.dumps({
                    "type": "pong",
                    "timestamp": datetime.now().isoformat()
                }))
                
            elif message_type == "suno_form_data":
                # Datos del formulario de Suno recibidos
                await self._handle_suno_form_data(message)
                
            elif message_type == "generation_request":
                # Solicitud de generaci√≥n desde Suno
                await self._handle_generation_request(websocket, message)
                
            elif message_type == "generation_status":
                # Estado de generaci√≥n desde Suno
                await self._handle_generation_status(message)
                
            else:
                logger.warning(f"‚ö†Ô∏è Tipo de mensaje desconocido: {message_type}")
                
        except Exception as e:
            logger.error(f"‚ùå Error manejando mensaje de extensi√≥n: {e}")
    
    async def _handle_suno_form_data(self, message: Dict[str, Any]):
        """Manejar datos del formulario de Suno"""
        try:
            form_data = message.get("data", {})
            logger.info(f"üìù Datos de formulario Suno recibidos: {form_data}")
            
            # Aqu√≠ podr√≠as procesar los datos del formulario
            # Por ejemplo, guardarlos en una base de datos o enviarlos a Ollama
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando datos de formulario: {e}")
    
    async def _handle_generation_request(self, websocket: WebSocket, message: Dict[str, Any]):
        """Manejar solicitud de generaci√≥n desde Suno"""
        try:
            request_data = message.get("data", {})
            logger.info(f"üéµ Solicitud de generaci√≥n desde Suno: {request_data}")
            
            # Procesar solicitud de generaci√≥n
            # Aqu√≠ podr√≠as integrar con el sistema de generaci√≥n existente
            
            # Responder a la extensi√≥n
            await websocket.send_text(json.dumps({
                "type": "generation_response",
                "status": "received",
                "message": "Solicitud de generaci√≥n recibida",
                "timestamp": datetime.now().isoformat()
            }))
            
        except Exception as e:
            logger.error(f"‚ùå Error manejando solicitud de generaci√≥n: {e}")
    
    async def _handle_generation_status(self, message: Dict[str, Any]):
        """Manejar estado de generaci√≥n desde Suno"""
        try:
            status_data = message.get("data", {})
            logger.info(f"üìä Estado de generaci√≥n desde Suno: {status_data}")
            
            # Procesar estado de generaci√≥n
            # Aqu√≠ podr√≠as actualizar el estado en la base de datos
            
        except Exception as e:
            logger.error(f"‚ùå Error manejando estado de generaci√≥n: {e}")

# Instancia global del gestor
connection_manager = ExtensionConnectionManager()

# Router para WebSocket
router = APIRouter()

@router.websocket("/ws/extension")
async def websocket_extension(websocket: WebSocket):
    """WebSocket para comunicaci√≥n con extensiones"""
    connection_id = await connection_manager.connect(websocket, "extension")
    
    try:
        while True:
            # Recibir mensaje
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # Manejar mensaje
            await connection_manager.handle_extension_message(websocket, message)
            
    except WebSocketDisconnect:
        connection_manager.disconnect(websocket)
        logger.info(f"üîå Extensi√≥n desconectada: {connection_id}")
    except Exception as e:
        logger.error(f"‚ùå Error en WebSocket de extensi√≥n: {e}")
        connection_manager.disconnect(websocket)

@router.websocket("/ws/client")
async def websocket_client(websocket: WebSocket):
    """WebSocket para comunicaci√≥n con clientes web"""
    await connection_manager.connect(websocket, "client")
    
    try:
        while True:
            # Recibir mensaje
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # Reenviar a extensiones si es necesario
            if message.get("target") == "extension":
                await connection_manager.send_to_extension(message)
            
    except WebSocketDisconnect:
        connection_manager.disconnect(websocket)
        logger.info("üîå Cliente desconectado")
    except Exception as e:
        logger.error(f"‚ùå Error en WebSocket de cliente: {e}")
        connection_manager.disconnect(websocket)

# Funciones de utilidad para enviar mensajes
async def send_to_suno_extensions(message: Dict[str, Any]):
    """Enviar mensaje a todas las extensiones de Suno"""
    return await connection_manager.send_to_extension(message)

async def send_to_all_clients(message: Dict[str, Any]):
    """Enviar mensaje a todos los clientes"""
    return await connection_manager.send_to_all(message)

# Funci√≥n para solicitar generaci√≥n desde Suno
async def request_suno_generation(prompt: str, lyrics: str = "", style: str = "synthwave"):
    """Solicitar generaci√≥n de m√∫sica desde Suno"""
    message = {
        "type": "generation_request",
        "data": {
            "prompt": prompt,
            "lyrics": lyrics,
            "style": style,
            "timestamp": datetime.now().isoformat()
        }
    }
    
    return await send_to_suno_extensions(message)

