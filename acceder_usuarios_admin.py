#!/usr/bin/env python3
"""
Script para acceder a usuarios registrados usando credenciales de administrador
"""

import requests
import json
import sys
from datetime import datetime

# Configuraci√≥n
API_BASE_URL = "https://www.son1kvers3.com"
ADMIN_EMAIL = "nov4-ix@son1kvers3.com"
ADMIN_PASSWORD = "admin123"

def hacer_login_admin():
    """Hacer login como administrador y obtener token"""
    print("üîë Iniciando sesi√≥n como administrador...")
    
    try:
        response = requests.post(f"{API_BASE_URL}/api/auth/login", 
                               json={
                                   "email": ADMIN_EMAIL,
                                   "password": ADMIN_PASSWORD
                               }, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Login exitoso como administrador")
            print(f"   Email: {data.get('user', {}).get('email', 'N/A')}")
            print(f"   Role: {data.get('user', {}).get('role', 'N/A')}")
            print(f"   Level: {data.get('user', {}).get('level', 'N/A')}")
            
            # Obtener token si est√° disponible
            token = data.get('access_token')
            if token:
                print(f"   Token: {token[:20]}...")
                return token
            else:
                print("   ‚ö†Ô∏è  No se obtuvo token de acceso")
                return "admin_session"
        else:
            print(f"‚ùå Error en login: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error en login: {e}")
        return None

def buscar_usuarios_con_token(token):
    """Buscar usuarios usando el token de administrador"""
    print(f"\nüîç Buscando usuarios con token de administrador...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Lista de endpoints que podr√≠an contener usuarios
    endpoints = [
        "/api/admin/users",
        "/api/users",
        "/api/auth/users",
        "/api/system/users", 
        "/api/data/users",
        "/api/export/users",
        "/api/admin/data",
        "/api/admin/export",
        "/api/admin/list",
        "/api/admin/accounts",
        "/api/admin/registrations",
        "/api/system/accounts",
        "/api/system/registrations",
        "/api/accounts",
        "/api/registrations",
        "/api/user/list",
        "/api/user/accounts",
        "/api/database/users",
        "/api/db/users"
    ]
    
    usuarios_encontrados = []
    
    for endpoint in endpoints:
        try:
            print(f"   Probando: {endpoint}")
            response = requests.get(f"{API_BASE_URL}{endpoint}", 
                                  headers=headers, timeout=10)
            
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"      ‚úÖ Datos encontrados!")
                    
                    if isinstance(data, list):
                        print(f"      üìä Cantidad: {len(data)} registros")
                        usuarios_encontrados.extend(data)
                        
                        # Mostrar algunos ejemplos
                        for i, user in enumerate(data[:3]):
                            print(f"         Usuario {i+1}: {user}")
                    else:
                        print(f"      üìã Contenido: {json.dumps(data, indent=2)[:200]}...")
                        if 'users' in data:
                            usuarios_encontrados.extend(data['users'])
                        elif 'data' in data:
                            usuarios_encontrados.extend(data['data'])
                            
                except json.JSONDecodeError:
                    print(f"      üìÑ Texto: {response.text[:100]}...")
                    
            elif response.status_code == 401:
                print(f"      üîí No autorizado")
            elif response.status_code == 403:
                print(f"      üö´ Prohibido")
            elif response.status_code != 404:
                print(f"      ‚ö†Ô∏è  Respuesta: {response.text[:100]}...")
                
        except Exception as e:
            print(f"      ‚ùå Error: {e}")
    
    return usuarios_encontrados

def buscar_usuarios_sin_token():
    """Buscar usuarios sin token (endpoints p√∫blicos)"""
    print(f"\nüîç Buscando usuarios en endpoints p√∫blicos...")
    
    # Endpoints que podr√≠an ser p√∫blicos
    public_endpoints = [
        "/api/public/users",
        "/api/guest/users", 
        "/api/demo/users",
        "/api/test/users",
        "/api/stats/users",
        "/api/metrics/users",
        "/api/analytics/users",
        "/api/reports/users",
        "/api/export/public/users",
        "/api/data/public/users"
    ]
    
    usuarios_encontrados = []
    
    for endpoint in public_endpoints:
        try:
            print(f"   Probando: {endpoint}")
            response = requests.get(f"{API_BASE_URL}{endpoint}", timeout=5)
            
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"      ‚úÖ Datos encontrados!")
                    
                    if isinstance(data, list):
                        print(f"      üìä Cantidad: {len(data)} registros")
                        usuarios_encontrados.extend(data)
                    else:
                        print(f"      üìã Contenido: {json.dumps(data, indent=2)[:200]}...")
                        
                except json.JSONDecodeError:
                    print(f"      üìÑ Texto: {response.text[:100]}...")
                    
        except Exception as e:
            print(f"      ‚ùå Error: {e}")
    
    return usuarios_encontrados

def exportar_usuarios(usuarios):
    """Exportar usuarios encontrados a archivo"""
    if not usuarios:
        print("\n‚ùå No se encontraron usuarios para exportar")
        return
    
    print(f"\nüìä EXPORTANDO USUARIOS ENCONTRADOS")
    print(f"   Total de usuarios: {len(usuarios)}")
    
    # Crear archivo de exportaci√≥n
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"usuarios_son1kvers3_{timestamp}.json"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(usuarios, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"‚úÖ Usuarios exportados a: {filename}")
        
        # Mostrar resumen
        print(f"\nüìã RESUMEN DE USUARIOS:")
        for i, user in enumerate(usuarios[:10]):  # Mostrar primeros 10
            print(f"   {i+1}. {user}")
        
        if len(usuarios) > 10:
            print(f"   ... y {len(usuarios) - 10} m√°s")
            
    except Exception as e:
        print(f"‚ùå Error exportando usuarios: {e}")

def main():
    print("üéµ SON1KVERS3 - ACCESO A USUARIOS REGISTRADOS")
    print("=" * 60)
    print(f"üåê URL: {API_BASE_URL}")
    print(f"üë§ Admin: {ADMIN_EMAIL}")
    print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Hacer login como administrador
    token = hacer_login_admin()
    
    usuarios_encontrados = []
    
    if token:
        # Buscar usuarios con token de administrador
        usuarios_con_token = buscar_usuarios_con_token(token)
        usuarios_encontrados.extend(usuarios_con_token)
    
    # Buscar usuarios en endpoints p√∫blicos
    usuarios_publicos = buscar_usuarios_sin_token()
    usuarios_encontrados.extend(usuarios_publicos)
    
    # Eliminar duplicados
    usuarios_unicos = []
    emails_vistos = set()
    
    for user in usuarios_encontrados:
        if isinstance(user, dict):
            email = user.get('email', user.get('username', str(user)))
        else:
            email = str(user)
            
        if email not in emails_vistos:
            usuarios_unicos.append(user)
            emails_vistos.add(email)
    
    # Exportar usuarios
    exportar_usuarios(usuarios_unicos)
    
    print("\n" + "=" * 60)
    print("‚úÖ Proceso completado")
    
    if usuarios_unicos:
        print(f"üéâ Se encontraron {len(usuarios_unicos)} usuarios √∫nicos")
    else:
        print("‚ùå No se encontraron usuarios registrados")
        print("\nüí° POSIBLES RAZONES:")
        print("   1. Los usuarios se almacenan en una base de datos local")
        print("   2. No hay endpoint p√∫blico para listar usuarios")
        print("   3. Se requiere acceso directo al servidor")
        print("   4. Los usuarios se crean din√°micamente (demo)")

if __name__ == "__main__":
    main()

