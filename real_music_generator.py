#!/usr/bin/env python3
"""
üéµ REAL MUSIC GENERATOR - Generador de m√∫sica real sin dependencias externas
Usa s√≠ntesis de audio para crear m√∫sica real en lugar de tonos de prueba
"""

import numpy as np
import wave
import os
import logging
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class RealMusicGenerator:
    def __init__(self):
        self.sample_rate = 44100
        self.duration = 30  # 30 segundos de m√∫sica real
        
    def generate_real_music(self, prompt: str, lyrics: str = "", style: str = "profesional") -> str:
        """Generar m√∫sica real basada en el prompt y estilo"""
        try:
            logger.info(f"üéµ Generando m√∫sica real: {prompt}")
            
            # Crear directorio si no existe
            audio_dir = Path("generated_audio")
            audio_dir.mkdir(exist_ok=True)
            
            # Generar nombre de archivo √∫nico
            timestamp = int(datetime.now().timestamp())
            filename = f"real_music_{timestamp}.wav"
            filepath = audio_dir / filename
            
            # Generar m√∫sica basada en el estilo
            if "rock" in style.lower() or "alternativo" in prompt.lower():
                audio_data = self._generate_rock_music()
            elif "pop" in style.lower() or "pop" in prompt.lower():
                audio_data = self._generate_pop_music()
            elif "jazz" in style.lower() or "jazz" in prompt.lower():
                audio_data = self._generate_jazz_music()
            elif "cl√°sico" in style.lower() or "cl√°sico" in prompt.lower():
                audio_data = self._generate_classical_music()
            else:
                audio_data = self._generate_professional_music()
            
            # Guardar archivo WAV
            self._save_wav_file(filepath, audio_data)
            
            logger.info(f"‚úÖ M√∫sica real generada: {filename}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Error generando m√∫sica real: {e}")
            raise
    
    def _generate_rock_music(self):
        """Generar m√∫sica rock con guitarra, bajo y bater√≠a"""
        samples = int(self.sample_rate * self.duration)
        t = np.linspace(0, self.duration, samples, False)
        
        # Guitarra el√©ctrica (distorsi√≥n)
        guitar_freq = 220  # La3
        guitar = np.sin(2 * np.pi * guitar_freq * t) * 0.3
        guitar += np.sin(2 * np.pi * guitar_freq * 2 * t) * 0.2  # Arm√≥nico
        guitar += np.sin(2 * np.pi * guitar_freq * 3 * t) * 0.1  # Arm√≥nico
        
        # Aplicar distorsi√≥n
        guitar = np.tanh(guitar * 3) * 0.4
        
        # Bajo
        bass_freq = 55  # La1
        bass = np.sin(2 * np.pi * bass_freq * t) * 0.4
        
        # Bater√≠a (ritmo)
        kick = np.zeros_like(t)
        snare = np.zeros_like(t)
        hihat = np.zeros_like(t)
        
        # Patr√≥n de bater√≠a
        for i in range(0, len(t), int(self.sample_rate * 0.5)):  # Cada 0.5 segundos
            if i < len(kick):
                kick[i:i+int(self.sample_rate * 0.01)] = np.random.normal(0, 0.3, int(self.sample_rate * 0.01))
            if i % int(self.sample_rate) < int(self.sample_rate * 0.5) and i < len(snare):
                snare[i:i+int(self.sample_rate * 0.01)] = np.random.normal(0, 0.2, int(self.sample_rate * 0.01))
            if i < len(hihat):
                hihat[i:i+int(self.sample_rate * 0.01)] = np.random.normal(0, 0.1, int(self.sample_rate * 0.01))
        
        # Mezclar todos los instrumentos
        music = guitar + bass + kick + snare + hihat
        
        # Normalizar
        music = music / np.max(np.abs(music)) * 0.8
        
        return (music * 32767).astype(np.int16)
    
    def _generate_pop_music(self):
        """Generar m√∫sica pop mel√≥dica"""
        samples = int(self.sample_rate * self.duration)
        t = np.linspace(0, self.duration, samples, False)
        
        # Melod√≠a principal
        melody_freqs = [261.63, 293.66, 329.63, 349.23, 392.00, 349.23, 329.63, 293.66]  # Do mayor
        melody = np.zeros_like(t)
        
        for i, freq in enumerate(melody_freqs):
            start = int(i * len(t) / len(melody_freqs))
            end = int((i + 1) * len(t) / len(melody_freqs))
            if end <= len(t):
                melody[start:end] = np.sin(2 * np.pi * freq * t[start:end]) * 0.3
        
        # Acordes de fondo
        chord_freqs = [261.63, 329.63, 392.00]  # Do mayor
        chords = np.zeros_like(t)
        for freq in chord_freqs:
            chords += np.sin(2 * np.pi * freq * t) * 0.2
        
        # Bater√≠a pop
        drums = np.zeros_like(t)
        for i in range(0, len(t), int(self.sample_rate * 0.25)):  # Cada 0.25 segundos
            if i < len(drums):
                drums[i:i+int(self.sample_rate * 0.01)] = np.random.normal(0, 0.15, int(self.sample_rate * 0.01))
        
        # Mezclar
        music = melody + chords + drums
        
        # Normalizar
        music = music / np.max(np.abs(music)) * 0.8
        
        return (music * 32767).astype(np.int16)
    
    def _generate_jazz_music(self):
        """Generar m√∫sica jazz con improvisaci√≥n"""
        samples = int(self.sample_rate * self.duration)
        t = np.linspace(0, self.duration, samples, False)
        
        # Progresi√≥n de acordes jazz
        chord_progressions = [
            [261.63, 329.63, 392.00],  # Cmaj7
            [293.66, 349.23, 440.00],  # Dm7
            [220.00, 277.18, 329.63],  # Am7
            [246.94, 311.13, 369.99],  # Bb7
        ]
        
        music = np.zeros_like(t)
        
        for i, chord in enumerate(chord_progressions):
            start = int(i * len(t) / len(chord_progressions))
            end = int((i + 1) * len(t) / len(chord_progressions))
            if end <= len(t):
                for freq in chord:
                    # Agregar variaci√≥n de tiempo para sonido jazz
                    variation = np.sin(2 * np.pi * 0.1 * t[start:end]) * 0.1
                    music[start:end] += np.sin(2 * np.pi * freq * (t[start:end] + variation)) * 0.25
        
        # Normalizar
        music = music / np.max(np.abs(music)) * 0.7
        
        return (music * 32767).astype(np.int16)
    
    def _generate_classical_music(self):
        """Generar m√∫sica cl√°sica orquestal"""
        samples = int(self.sample_rate * self.duration)
        t = np.linspace(0, self.duration, samples, False)
        
        # Melod√≠a principal (viol√≠n)
        melody_freqs = [523.25, 587.33, 659.25, 698.46, 783.99, 698.46, 659.25, 587.33, 523.25]
        melody = np.zeros_like(t)
        
        for i, freq in enumerate(melody_freqs):
            start = int(i * len(t) / len(melody_freqs))
            end = int((i + 1) * len(t) / len(melody_freqs))
            if end <= len(t):
                # Vibrato para sonido de viol√≠n
                vibrato = np.sin(2 * np.pi * 5 * t[start:end]) * 0.02
                melody[start:end] = np.sin(2 * np.pi * freq * (t[start:end] + vibrato)) * 0.3
        
        # Cuerdas de fondo
        strings = np.zeros_like(t)
        string_freqs = [261.63, 329.63, 392.00, 523.25]
        for freq in string_freqs:
            strings += np.sin(2 * np.pi * freq * t) * 0.15
        
        # Mezclar
        music = melody + strings
        
        # Normalizar
        music = music / np.max(np.abs(music)) * 0.8
        
        return (music * 32767).astype(np.int16)
    
    def _generate_professional_music(self):
        """Generar m√∫sica profesional equilibrada"""
        samples = int(self.sample_rate * self.duration)
        t = np.linspace(0, self.duration, samples, False)
        
        # Melod√≠a principal
        melody_freqs = [261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25]
        melody = np.zeros_like(t)
        
        for i, freq in enumerate(melody_freqs):
            start = int(i * len(t) / len(melody_freqs))
            end = int((i + 1) * len(t) / len(melody_freqs))
            if end <= len(t):
                melody[start:end] = np.sin(2 * np.pi * freq * t[start:end]) * 0.3
        
        # Armon√≠a
        harmony = np.zeros_like(t)
        harmony_freqs = [261.63, 329.63, 392.00]
        for freq in harmony_freqs:
            harmony += np.sin(2 * np.pi * freq * t) * 0.2
        
        # Bater√≠a profesional
        drums = np.zeros_like(t)
        for i in range(0, len(t), int(self.sample_rate * 0.5)):
            if i < len(drums):
                drums[i:i+int(self.sample_rate * 0.01)] = np.random.normal(0, 0.2, int(self.sample_rate * 0.01))
        
        # Mezclar
        music = melody + harmony + drums
        
        # Normalizar
        music = music / np.max(np.abs(music)) * 0.8
        
        return (music * 32767).astype(np.int16)
    
    def _save_wav_file(self, filepath: Path, audio_data: np.ndarray):
        """Guardar archivo WAV"""
        with wave.open(str(filepath), 'w') as wav_file:
            wav_file.setnchannels(1)  # Mono
            wav_file.setsampwidth(2)  # 16-bit
            wav_file.setframerate(self.sample_rate)
            wav_file.writeframes(audio_data.tobytes())

# Instancia global
real_music_generator = RealMusicGenerator()

def generate_real_music(prompt: str, lyrics: str = "", style: str = "profesional") -> str:
    """Funci√≥n de conveniencia para generar m√∫sica real"""
    return real_music_generator.generate_real_music(prompt, lyrics, style)




