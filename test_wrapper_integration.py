#!/usr/bin/env python3
"""
üéµ Test Script para Integraci√≥n Suno Wrapper
Prueba la integraci√≥n completa entre frontend, wrapper y API
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

class WrapperIntegrationTester:
    def __init__(self):
        self.wrapper_url = "http://localhost:3001"
        self.api_url = "http://localhost:8000"
        self.frontend_url = "http://localhost:8000"  # Frontend servido por FastAPI
        
    async def test_wrapper_health(self):
        """Probar salud del wrapper"""
        print("üîç Probando salud del wrapper...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.wrapper_url}/health") as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ Wrapper saludable: {data.get('status')}")
                        print(f"   Versi√≥n: {data.get('version')}")
                        print(f"   Cookies activas: {data.get('cookies', {}).get('active', 0)}")
                        return True
                    else:
                        print(f"‚ùå Wrapper no saludable: HTTP {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error conectando con wrapper: {e}")
            return False
    
    async def test_api_health(self):
        """Probar salud de la API principal"""
        print("üîç Probando salud de la API principal...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_url}/api/status") as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ API saludable: {data.get('api')}")
                        return True
                    else:
                        print(f"‚ùå API no saludable: HTTP {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error conectando con API: {e}")
            return False
    
    async def test_wrapper_generation(self):
        """Probar generaci√≥n con wrapper"""
        print("üéµ Probando generaci√≥n con wrapper...")
        try:
            test_prompt = "una canci√≥n √©pica de synthwave sobre la resistencia digital"
            test_lyrics = "En las redes del tiempo, donde los datos susurran,\nNOV4-IX despierta con ritmos que perduran."
            
            payload = {
                "prompt": test_prompt,
                "lyrics": test_lyrics,
                "style": "profesional"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.wrapper_url}/generate-music",
                    json=payload,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            print(f"‚úÖ Generaci√≥n exitosa con wrapper")
                            print(f"   Audio URLs: {len(data.get('audioUrls', []))}")
                            print(f"   Letras: {len(data.get('lyrics', ''))} caracteres")
                            return True
                        else:
                            print(f"‚ùå Generaci√≥n fall√≥: {data.get('error')}")
                            return False
                    else:
                        error_text = await response.text()
                        print(f"‚ùå Error HTTP {response.status}: {error_text}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå Error en generaci√≥n con wrapper: {e}")
            return False
    
    async def test_api_generation(self):
        """Probar generaci√≥n con API principal"""
        print("üéµ Probando generaci√≥n con API principal...")
        try:
            test_prompt = "m√∫sica cyberpunk √©pica"
            
            payload = {
                "prompt": test_prompt,
                "lyrics": "",
                "style": "synthwave"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.api_url}/api/generate",
                    json=payload,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ Generaci√≥n exitosa con API principal")
                        print(f"   Job ID: {data.get('job_id', 'N/A')}")
                        print(f"   Status: {data.get('status', 'N/A')}")
                        return True
                    else:
                        error_text = await response.text()
                        print(f"‚ùå Error HTTP {response.status}: {error_text}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå Error en generaci√≥n con API: {e}")
            return False
    
    async def test_frontend_integration(self):
        """Probar integraci√≥n del frontend"""
        print("üåê Probando integraci√≥n del frontend...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.frontend_url}/") as response:
                    if response.status == 200:
                        content = await response.text()
                        if "suno_wrapper_integration.js" in content:
                            print("‚úÖ Script de integraci√≥n Suno encontrado en frontend")
                            return True
                        else:
                            print("‚ö†Ô∏è Script de integraci√≥n Suno no encontrado en frontend")
                            return False
                    else:
                        print(f"‚ùå Frontend no accesible: HTTP {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error accediendo al frontend: {e}")
            return False
    
    async def test_wrapper_stats(self):
        """Probar estad√≠sticas del wrapper"""
        print("üìä Probando estad√≠sticas del wrapper...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.wrapper_url}/stats") as response:
                    if response.status == 200:
                        data = await response.json()
                        print(f"‚úÖ Estad√≠sticas obtenidas")
                        print(f"   Cookies totales: {len(data.get('cookies', []))}")
                        print(f"   Uptime: {data.get('uptime', 0):.2f} segundos")
                        return True
                    else:
                        print(f"‚ùå Error obteniendo estad√≠sticas: HTTP {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error en estad√≠sticas: {e}")
            return False
    
    async def run_all_tests(self):
        """Ejecutar todas las pruebas"""
        print("üöÄ Iniciando pruebas de integraci√≥n Suno Wrapper")
        print("=" * 60)
        
        tests = [
            ("Wrapper Health", self.test_wrapper_health),
            ("API Health", self.test_api_health),
            ("Frontend Integration", self.test_frontend_integration),
            ("Wrapper Stats", self.test_wrapper_stats),
            ("Wrapper Generation", self.test_wrapper_generation),
            ("API Generation", self.test_api_generation)
        ]
        
        results = {}
        
        for test_name, test_func in tests:
            print(f"\nüß™ Ejecutando: {test_name}")
            try:
                result = await test_func()
                results[test_name] = result
                print(f"{'‚úÖ' if result else '‚ùå'} {test_name}: {'PAS√ì' if result else 'FALL√ì'}")
            except Exception as e:
                print(f"‚ùå {test_name}: ERROR - {e}")
                results[test_name] = False
            
            # Peque√±a pausa entre pruebas
            await asyncio.sleep(1)
        
        # Resumen final
        print("\n" + "=" * 60)
        print("üìã RESUMEN DE PRUEBAS")
        print("=" * 60)
        
        passed = sum(1 for result in results.values() if result)
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
            print(f"{status} {test_name}")
        
        print(f"\nüéØ Resultado: {passed}/{total} pruebas pasaron")
        
        if passed == total:
            print("üéâ ¬°Todas las pruebas pasaron! La integraci√≥n est√° funcionando correctamente.")
        elif passed >= total * 0.8:
            print("‚ö†Ô∏è La mayor√≠a de las pruebas pasaron. Revisar las que fallaron.")
        else:
            print("‚ùå Muchas pruebas fallaron. Revisar la configuraci√≥n del sistema.")
        
        return results

async def main():
    """Funci√≥n principal"""
    tester = WrapperIntegrationTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    print("üéµ Son1k Suno Wrapper Integration Tester")
    print("Aseg√∫rate de que est√©n ejecut√°ndose:")
    print("  - Wrapper Node.js: npm start (puerto 3001)")
    print("  - API Python: python3 main_production_final.py (puerto 8000)")
    print()
    
    asyncio.run(main())



